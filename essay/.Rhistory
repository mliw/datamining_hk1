ncol = 32)
sm = matrix(0, nrow = 10000, ncol = 32)
cores <- detectCores(logical = F)
cl <- makeCluster(cores)
registerDoParallel(cl, cores = cores)
wuju <<- c()
system.time(#.combine是数据的合并方法，如果缺省则返回一个list
res <- foreach(i = 1:100, .combine = 'rbind') %dopar%
{
sm1 = sm
for (j in 1:32)
{
xx = which(target[, j] == query[i, j])
sm1[xx, j] = 1
}
xsm = apply(sm1, 1, sum) / 32
yy = which(xsm >= 0.5)
xx = data.frame(query = rep(i, length(yy)),
target = yy,
sim = xsm[yy])
return(xx)
}
)
#关闭并行
stopImplicitCluster()
stopCluster(cl)
library(foreach)
library(doParallel)
#library(rsconnect)
target = matrix(sample(c("A", "B", "C", "D", "E", "F"), 320000, replace = TRUE),
nrow = 10000,
ncol = 32)
query = matrix(sample(c("A", "B", "C", "D", "E", "F"), 3200, replace = TRUE),
nrow = 100,
ncol = 32)
sm = matrix(0, nrow = 10000, ncol = 32)
WUJU = C()
system.time(#.combine是数据的合并方法，如果缺省则返回一个list
for (i in 1:1000)
{
sm1 = sm
for (j in 1:32)
{
xx = which(target[, j] == query[i, j])
sm1[xx, j] = 1
}
xsm = apply(sm1, 1, sum) / 32
yy = which(xsm >= 0.5)
wuju = rbind(
wuju,
data.frame(
query=rep(i,length(yy)),
target = yy,
sim=xsm[yy]
)
)
}
)
yy
library(foreach)
library(doParallel)
#library(rsconnect)
target = matrix(sample(c("A", "B", "C", "D", "E", "F"), 320000, replace = TRUE),
nrow = 10000,
ncol = 32)
query = matrix(sample(c("A", "B", "C", "D", "E", "F"), 3200, replace = TRUE),
nrow = 100,
ncol = 32)
sm = matrix(0, nrow = 10000, ncol = 32)
WUJU = C()
system.time(#.combine是数据的合并方法，如果缺省则返回一个list
for (i in 1:1000)
{
sm1 = sm
for (j in 1:32)
{
xx = which(target[, j] == query[i, j])
sm1[xx, j] = 1
}
xsm = apply(sm1, 1, sum) / 32
yy = which(xsm >= 0.5)
if (length(yy)>0)
{
wuju = rbind(
wuju,
data.frame(
query=rep(i,length(yy)),
target = yy,
sim=xsm[yy]
)
)
}
}
)
library(foreach)
library(doParallel)
#library(rsconnect)
target = matrix(
sample(c("A", "B", "C", "D", "E", "F"),
320000, replace = TRUE),
nrow = 10000,
ncol = 32)
query = matrix(
sample(c("A", "B", "C", "D", "E", "F"),
3200, replace = TRUE),
nrow = 100,
ncol = 32)
sm = matrix(0, nrow = 10000, ncol = 32)
cores <- detectCores(logical = F)
cl <- makeCluster(cores)
registerDoParallel(cl, cores = cores)
wuju <<- c()
system.time(#.combine是数据的合并方法，如果缺省则返回一个list
res <- foreach(i = 1:100, .combine = 'rbind') %dopar%
{
sm1 = sm
for (j in 1:32)
{
xx = which(target[, j] == query[i, j])
sm1[xx, j] = 1
}
xsm = apply(sm1, 1, sum) / 32
yy = which(xsm >= 0.5)
xx = data.frame(query = rep(i, length(yy)),
target = yy,
sim = xsm[yy])
return(xx)
}
)
#关闭并行
stopImplicitCluster()
stopCluster(cl)
library(foreach)
library(doParallel)
#library(rsconnect)
target = matrix(sample(c("A", "B", "C", "D", "E", "F"), 320000, replace = TRUE),
nrow = 10000,
ncol = 32)
query = matrix(sample(c("A", "B", "C", "D", "E", "F"), 3200, replace = TRUE),
nrow = 100,
ncol = 32)
sm = matrix(0, nrow = 10000, ncol = 32)
WUJU = C()
system.time(#.combine是数据的合并方法，如果缺省则返回一个list
for (i in 1:1000)
{
sm1 = sm
for (j in 1:32)
{
xx = which(target[, j] == query[i, j])
sm1[xx, j] = 1
}
xsm = apply(sm1, 1, sum) / 32
yy = which(xsm >= 0.5)
if (length(yy)>0)
{
wuju = rbind(
wuju,
data.frame(
query=rep(i,length(yy)),
target = yy,
sim=xsm[yy]
)
)
}
}
)
library(foreach)
library(doParallel)
#library(rsconnect)
target = matrix(
sample(c("A", "B", "C", "D", "E", "F"),
320000, replace = TRUE),
nrow = 10000,
ncol = 32)
query = matrix(
sample(c("A", "B", "C", "D", "E", "F"),
3200, replace = TRUE),
nrow = 100,
ncol = 32)
sm = matrix(0, nrow = 10000, ncol = 32)
cores <- detectCores(logical = F)
cl <- makeCluster(cores)
registerDoParallel(cl, cores = cores)
wuju <<- c()
system.time(#.combine是数据的合并方法，如果缺省则返回一个list
res <- foreach(i = 1:100, .combine = 'rbind') %dopar%
{
sm1 = sm
for (j in 1:32)
{
xx = which(target[, j] == query[i, j])
sm1[xx, j] = 1
}
xsm = apply(sm1, 1, sum) / 32
yy = which(xsm >= 0.5)
xx = data.frame(query = rep(i, length(yy)),
target = yy,
sim = xsm[yy])
return(xx)
}
)
#关闭并行
stopImplicitCluster()
stopCluster(cl)
runApp('D:/BioSun')
id <- c(1,2,3)
name <- c("Jack","Tom","Mark")
age <- c(22,30,27)
mydata <- data.frame(id,age,name)
edit(mydata)
edit(mydata)
edit(mydata)
install.packages("rglwidget")
library(rglwidget)
library(rglwidget)
?plot3d
ggplot(airquality,aes(Day,Temp,group=Month,color=factor(Month)))+geom_line()+scale_color_viridis_d()+labs(x="DayofMonth",y="Temperature")+theme(legend.position="top")
shiny::runApp('D:/BioSun')
ggplot(airquality,aes(Day,Temp,group=Month,color=factor(Month)))+geom_line()+scale_color_viridis_d()+labs(x="DayofMonth",y="Temperature")+theme(legend.position="top")
data("gapminder")
library(tidyverse)
library(dslabs)
library(gganimate)
library(ggplot2)
theme_set(theme_bw(base_size = 16))
years <- seq(1952, 2007)
p <- filter(gapminder, year %in% years & !is.na(continent) &
!is.na(gdp) & !is.na(life_expectancy)) %>%
mutate(pop_in_millions = population/10^6) %>%
ggplot(aes(x = log10(gdp), y = life_expectancy,
col = continent, frame = year,
size = pop_in_millions)) +
geom_point(alpha = 0.8) +
guides(size = FALSE) +
theme(plot.title = element_blank(), legend.title = element_blank()) +
coord_cartesian(ylim = c(30, 90)) +
xlab("GDP") +
ylab("Life Expectancy") +
geom_text(aes(x = 10, y = 85, label = year), cex = 20, color = "grey")
gganimate(p, filename = "life_expectancy_vs_GDP.gif", title_frame = FALSE,
interval=0.15, ani.width = 700)
gc()
?gc
gc(reset = TRUE)
gc()
?read.xls
test <-
data.frame(
x1 = c(1, 2, 3, 4, 5, 1, 3, 5),
x2 = c("a", "b", "c", "d", "e", "a", "b", "e"),
x3 = c("a", "b", "c", "d", "e", "a", "c", "e")
)
test
duplicated(test)
test[duplicated(test),]
x=test[1,]
x
test
x
which(test  == x)
distinct(test)
distribution(test)
distinct(test)
unique(test)
duplicated(test)
test
duplicated
duplicated(test)
which(test[,1:3]=x)
which(test[,1:3]==x)
library(plyr)
library(plyr)
unique(test)
duplicated.array(test)
xx=duplicated.array(test)
xx
str(xx)
duplicated.POSIXlt(test)
xx=duplicated.POSIXlt(test)
xx
?duplicated.data.frame
anyDuplicated(test)
xx=anyDuplicated(test)
xx
xx=Duplicated(test,fromLast=TRUE)
xx=duplicated(test,fromLast=TRUE)
xx
yy=duplicated(test,fromLast=TRUE)
xx=duplicated(test)
xx
yy
t=test[which(union(xx,yy))==TRUE,]
t
test
xx
yy
t=test[union(which(xx==TRUE),which(yy==TRUE)),]
t
?inner_join
??inner_join
?intersect
setequal(1:10,1:10)
setequal(test,x)
A=data.frame(
x=1:5,
y=6:10
)
A
A=data.frame(
x=1:5,
y=6:10
)
B=data.frame(
x=3:7,
y=5:9
)
A
B
which(A==B)
which(A[,1]==B[,1],A[,2]==B[,2])
install.packages("mathjaxr")
library("mathjaxr")
library("mathjaxr")
??mathjaxr
?mathjaxr
library(mathjaxr)
observeEvent(input$home_menu_introduction, {
output$home_introduction_output = renderUI({
withMathJax(
helpText('and output 2 $$3^2+4^2=5^2$$'),
helpText('and output 3 $$\\sin^2(\\theta)+\\cos^2(\\theta)=1$$'),
helpText(
'The busy Cauchy distribution
$$\\frac{1}{\\pi\\gamma\\,\\left[1 +
\\left(\\frac{x-x_0}{\\gamma}\\right)^2\\right]}\\!$$'
)
)
})
})
data = data.frame(x=c('Collection 1', 'Collection 2', 'Intersection'),
y=c(40,50,20))
knitr::kable(data)
echartr(data, x, y, type='venn') %>%
setTitle('Venn', 'Fictious Data')
?echartr
shiny::runApp('D:/BioSun')
install.packages("FirebrowseR")
devtools::install_github("mariodeng/FirebrowseR")
install.packages("devtools")
library(devtools)
devtools::install_github("mariodeng/FirebrowseR")
require(FirebrowseR)
mRNA.Exp = Samples.mRNASeq(format = "csv",
gene = c("PTEN", "RUNX1"),
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG")
)
dim(mRNA.Exp)
mRNA.Exp
mRNA.Exp[, c("tcga_participant_barcode", "expression_log2", "z.score")]
require(FirebrowseR)
mRNA.Exp = Samples.mRNASeq(
format = "csv",
gene = c("PTEN", "RUNX1"),
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG")
)
mRNA.Exp
mRNA.Exp
?Samples.mRNASeq
require(FirebrowseR)
mRNA.Exp = Samples.mRNASeq(
format = "csv",
gene = c("PTEN", "RUNX1"),
cohort = c("CHOL","COAD","COADREAD"),
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG")
)
require(FirebrowseR)
mRNA.Exp = Samples.mRNASeq(
format = "csv",
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG")
)
require(FirebrowseR)
mRNA.Exp = Samples.mmiRSeq(
format = "csv",
mir = c("hsa-let-7b-5p","hsa-let-7a-1"),
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG")
)
mRNA.Exp = Samples.miRSeq(
format = "csv",
mir = c("hsa-let-7b-5p","hsa-let-7a-1"),
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG")
)
mRNA.Exp
tt = Analyses.FeatureTable(
format = "tsv",
cohort = "",
date = "2016_01_28",
column = "",
page = "1",
page_size = "250"
)
tt = Analyses.FeatureTable(
format = "tsv",
cohort = "ACC",
date = "2016_01_28",
column = "",
page = "1",
page_size = "250"
)
dim(tt)
tt[1:10,1:5]
View(tt)
y=Metadata.Patients(format = "csv", cohort = "BRCA", page = "1",
page_size = "250", sort_by = "cohort")
y
y
Metadata.Platforms(format = "csv", platform = "")
xx=Metadata.Platforms(format = "csv", platform = "")
xx
View(x)
View(xx)
xx=Metadata.Patients(format = "csv", cohort = "", page = "1",
page_size = "250", sort_by = "cohort")
xx
View(xx)
shiny::runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
install.packages("prase")
shiny::runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
View(xx)
runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
?style
bold("foobar")
?bold
runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
?animation
df <- data.frame(
x = c(1, 2, 2, 1, 1, 2),
y = c(1, 2, 2, 1, 1, 2),
z = c(1, 1, 2, 2, 3, 3)
)
plot_ly(df) %>%
add_markers(x = 1.5, y = 1.5) %>%
add_markers(x = ~x, y = ~y, frame = ~z)
if (interactive()) {
p <- ggplot(txhousing, aes(month, median)) +
geom_line(aes(group = year), alpha = 0.3) +
geom_smooth() +
geom_line(aes(frame = year, ids = month), color = "red") +
facet_wrap(~ city)
ggplotly(p, width = 1200, height = 900) %>%
animation_opts(1000)
}
tags$animate()
tags$area()
runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
?tags
runApp('D:/BioSun')
shiny::runApp('D:/BioSun')
sample(40)
runApp('D:/BioSun')
runApp('D:/BioSun')
runApp('D:/BioSun')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
??biostrings
?biostrings
?biostrings
?Biostrings
??Biostrings
library(Biostrings)
?Biostrings::AAString
AA_ALPHABET
AA_STANDARD
d <- DNAString("TTGAAAA-CTC-N")
r <- RNAString(d)
r
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
version
install.packages(c("ggplot2", "knitr"))
getwd()
setwd("G:/UT-Austin2020-2021研究生一年级/ECO395M_DATA MININGSTAT LEARNING/homeworks/datamining_hk1/essay")
setwd("G:/UT-Austin2020-2021研究生一年级/ECO395M_DATA MININGSTAT LEARNING/homeworks/datamining_hk1/essay")
getwd()
gasprice = read.csv("data/GasPrices.csv")
library(ggplot2)
p0 = ggplot(data=gasprice) +
geom_boxplot(aes(x=Competitors, y=Price))
p0
