surv_pct = surv_count/total_count)
# We could also just skip the "middle man" variables and
# go straight to percentages:
titanic %>%
group_by(sex) %>%
summarize(mean_age = mean(age),
surv_pct = sum(survived == 'yes')/n())
titanic %>%
filter(sex=='female') %>%
group_by(passengerClass) %>%
summarize(total_count = n(),
surv_pct = sum(survived == 'yes')/n())
titanic = titanic %>%
mutate(adult = ifelse(age > 18, '18+', 'under18'))
head(titanic)
titanic %>%
group_by(sex, adult, passengerClass) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
d1 = titanic %>%
group_by(sex) %>%
summarize(surv_pct = sum(survived=='yes')/n())
d1
# Let's store our one-group summary in a data frame called d1
d1 = titanic %>%
group_by(sex) %>%
summarize(surv_pct = sum(survived=="yes")/n())
d1
d1
ggplot(data = d1) +
geom_col(mapping = aes(x=sex, y=surv_pct))
d2 = titanic %>%
group_by(sex, adult) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
ggplot(data = d2) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge')
d2
ggplot(data = d2) +
geom_col(mapping = aes(x=adult, y=surv_pct),
position ='dodge')
ggplot(data = d2) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge')
# Now three conditioning variables!  Add a faceting layer:
d3 = titanic %>%
group_by(sex, passengerClass, adult) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
#   - survival vs age, holding sex constant
# Now three conditioning variables!  Add a faceting layer:
d3 = titanic %>%
group_by(sex, passengerClass, adult) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
#   - survival vs age, holding sex constant
# Now three conditioning variables!  Add a faceting layer:
d3 = titanic %>%
group_by(sex, passengerClass, adult) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
ggplot(data = d3) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge') +
facet_wrap(~passengerClass)
# this one makes comparisons across class for fixed sex and age more immediate
ggplot(data = d3) +
geom_col(mapping = aes(x=sex, y=surv_pct, fill=passengerClass),
position ='dodge') +
facet_wrap(~adult)
# Mean age by class and sex
d4 = titanic %>%
group_by(sex, passengerClass) %>%
summarize(mean_age = mean(age))
d4
# Now a bar plot of mean by age class and sex
ggplot(data = d4) +
geom_col(mapping = aes(x=passengerClass, y=mean_age, fill=sex),
position ='dodge')
library(tidyverse)
library(ggplot2)
###
# Part 1: data work flow
# group/pipe/summarize/filter/mutate
###
# Use the Import Dataset button, or change the path name
# to the appropriate location on your computer and use this line
# setwd("G:/UT-Austin2020-2021研究生一年级/ECO395M_DATA MININGSTAT LEARNING/homeworks/datamining_hk1/exercise")
titanic = read.csv('data/titanic.csv')
# quick peak at the first 6 lines
head(titanic)
# Our basic contingency table of proportions,
# conditioning on the column variable (passenger).
# This is great for exploration...
xtabs(~survived + passengerClass, data=titanic) %>% # 管道函数，将前面函数的返回值作为下一个函数的第一个自变量
prop.table(margin=2)
# But xtabs isn't the best for making plots.
# To generate summaries for plotting, we use a different approach:
# pipe + group + summarize.
# It's a little bit more involved, but fancy plots/summaries are easier!
# Basic reason: to make fancy plots, we need our summaries in "long form."
# Let's see an example of pipe/group/summarize
# We'll group by sex and summarize by
# counting the total passengers and the survivors.
# Two notes:
#   1) n() is a tidyverse function that counts cases
#   2) We use the double-equals sign (==) to test for equality
# ?group_by查看group_by函数的意思
tem = group_by(titanic,sex)
titanic %>%
group_by(sex) %>%
summarize(total_count = n(),
mean_age = mean(age),
surv_count = sum(survived == 'yes'),
surv_pct = surv_count/total_count)
# We could also just skip the "middle man" variables and
# go straight to percentages:
titanic %>%
group_by(sex) %>%
summarize(mean_age = mean(age),
surv_pct = sum(survived == 'yes')/n())
# using filter let's us focus on a subset of the rows.
# here we look only at female passengers.
# note we need quotes around the string 'female'
# (they can be single quotes or double quotes)
titanic %>%
filter(sex=='female') %>%
group_by(passengerClass) %>%
summarize(total_count = n(),
surv_pct = sum(survived == 'yes')/n())
# only children
titanic %>%
filter(age < 18) %>%
group_by(passengerClass) %>%
summarize(total_count = n(),
surv_pct = sum(survived == 'yes')/n())
# Using mutate to add a column
# Let's add an indicator variable for adult or child
# and overwrite our original data frame with the new, augmented data frame.
titanic = titanic %>%
mutate(adult = ifelse(age > 18, '18+', 'under18'))
head(titanic)
# Now we can group by multiple variables
titanic %>%
group_by(sex, adult, passengerClass) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
# the result is a long-form table of summary statistics,
# one row for each group
###
# Part 2: bar plots
###
# Let's store our one-group summary in a data frame called d1
d1 = titanic %>%
group_by(sex) %>%
summarize(surv_pct = sum(survived=="yes")/n())
d1
# Now we can use d1 to make a barplot of survival percentage by sex.
# Use geom_col to make a barplot
ggplot(data = d1) +
geom_col(mapping = aes(x=sex, y=surv_pct))
# This workflow is easy to generalize to make fancier plots.
# Here we we:
#   1) group by sex and whether the passenger was an adult
#   2) summarize by calculating a survival percentage
d2 = titanic %>%
group_by(sex, adult) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
# Now the payoff we use our table of summary stats to make a bar plot.
# position = 'dodge' puts the bars side by side, rather than stacked
ggplot(data = d2) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge')
ggplot(data = d2) +
geom_col(mapping = aes(x=adult, y=surv_pct),
position ='dodge')
# We can make two different comparisons from this plot:
#   - survival vs sex, holding age constant
#   - survival vs age, holding sex constant
# Now three conditioning variables!  Add a faceting layer:
d3 = titanic %>%
group_by(sex, passengerClass, adult) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
ggplot(data = d3) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge') +
facet_wrap(~passengerClass)
# We can make many different comparisons from this plot:
#   - survival vs sex, holding age and class constant
#   - survival vs passengerClass, holding age and sex constant
#   - survival vs age, holding sex and passengerClass constant
# With some slightly cleaner labels
ggplot(data = d3) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge') +
facet_wrap(~passengerClass) +
labs(title="Survival on the Titanic",
y="Fraction surviving",
x = "Adult?",
fill="Sex")
# an entirely different organization of the same information.
# this one makes comparisons across class for fixed sex and age more immediate
ggplot(data = d3) +
geom_col(mapping = aes(x=sex, y=surv_pct, fill=passengerClass),
position ='dodge') +
facet_wrap(~adult)
###
# Let's try one more bar graph of summary statistics
# This time: means rather than proportions.
###
# Mean age by class and sex
d4 = titanic %>%
group_by(sex, passengerClass) %>%
summarize(mean_age = mean(age))
d4
# Now a bar plot of mean by age class and sex
ggplot(data = d4) +
geom_col(mapping = aes(x=passengerClass, y=mean_age, fill=sex),
position ='dodge')
library(tidyverse)
library(ggplot2)
###
# Part 1: data work flow
# group/pipe/summarize/filter/mutate
###
# Use the Import Dataset button, or change the path name
# to the appropriate location on your computer and use this line
# setwd("G:/UT-Austin2020-2021研究生一年级/ECO395M_DATA MININGSTAT LEARNING/homeworks/datamining_hk1/exercise")
titanic = read.csv('data/titanic.csv')
# quick peak at the first 6 lines
head(titanic)
# Our basic contingency table of proportions,
# conditioning on the column variable (passenger).
# This is great for exploration...
xtabs(~survived + passengerClass, data=titanic) %>% # 管道函数，将前面函数的返回值作为下一个函数的第一个自变量
prop.table(margin=2)
# But xtabs isn't the best for making plots.
# To generate summaries for plotting, we use a different approach:
# pipe + group + summarize.
# It's a little bit more involved, but fancy plots/summaries are easier!
# Basic reason: to make fancy plots, we need our summaries in "long form."
# Let's see an example of pipe/group/summarize
# We'll group by sex and summarize by
# counting the total passengers and the survivors.
# Two notes:
#   1) n() is a tidyverse function that counts cases
#   2) We use the double-equals sign (==) to test for equality
# ?group_by查看group_by函数的意思
tem = group_by(titanic,sex)
titanic %>%
group_by(sex) %>%
summarize(total_count = n(),
mean_age = mean(age),
surv_count = sum(survived == 'yes'),
surv_pct = surv_count/total_count)
# We could also just skip the "middle man" variables and
# go straight to percentages:
titanic %>%
group_by(sex) %>%
summarize(mean_age = mean(age),
surv_pct = sum(survived == 'yes')/n())
# using filter let's us focus on a subset of the rows.
# here we look only at female passengers.
# note we need quotes around the string 'female'
# (they can be single quotes or double quotes)
titanic %>%
filter(sex=='female') %>%
group_by(passengerClass) %>%
summarize(total_count = n(),
surv_pct = sum(survived == 'yes')/n())
# only children
titanic %>%
filter(age < 18) %>%
group_by(passengerClass) %>%
summarize(total_count = n(),
surv_pct = sum(survived == 'yes')/n())
# Using mutate to add a column
# Let's add an indicator variable for adult or child
# and overwrite our original data frame with the new, augmented data frame.
titanic = titanic %>%
mutate(adult = ifelse(age > 18, '18+', 'under18'))
head(titanic)
# Now we can group by multiple variables
titanic %>%
group_by(sex, adult, passengerClass) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
# the result is a long-form table of summary statistics,
# one row for each group
###
# Part 2: bar plots
###
# Let's store our one-group summary in a data frame called d1
d1 = titanic %>%
group_by(sex) %>%
summarize(surv_pct = sum(survived=="yes")/n())
d1
# Now we can use d1 to make a barplot of survival percentage by sex.
# Use geom_col to make a barplot
ggplot(data = d1) +
geom_col(mapping = aes(x=sex, y=surv_pct))
# This workflow is easy to generalize to make fancier plots.
# Here we we:
#   1) group by sex and whether the passenger was an adult
#   2) summarize by calculating a survival percentage
d2 = titanic %>%
group_by(sex, adult) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
# Now the payoff we use our table of summary stats to make a bar plot.
# position = 'dodge' puts the bars side by side, rather than stacked
ggplot(data = d2) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge')
ggplot(data = d2) +
geom_col(mapping = aes(x=adult, y=surv_pct),
position ='dodge')
# We can make two different comparisons from this plot:
#   - survival vs sex, holding age constant
#   - survival vs age, holding sex constant
# Now three conditioning variables!  Add a faceting layer:
d3 = titanic %>%
group_by(sex, passengerClass, adult) %>%
summarize(surv_pct = sum(survived == 'yes')/n())
ggplot(data = d3) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge') +
facet_wrap(~passengerClass)
# We can make many different comparisons from this plot:
#   - survival vs sex, holding age and class constant
#   - survival vs passengerClass, holding age and sex constant
#   - survival vs age, holding sex and passengerClass constant
# With some slightly cleaner labels
ggplot(data = d3) +
geom_col(mapping = aes(x=adult, y=surv_pct, fill=sex),
position ='dodge') +
facet_wrap(~passengerClass) +
labs(title="Survival on the Titanic",
y="Fraction surviving",
x = "Adult?",
fill="Sex")
# an entirely different organization of the same information.
# this one makes comparisons across class for fixed sex and age more immediate
ggplot(data = d3) +
geom_col(mapping = aes(x=sex, y=surv_pct, fill=passengerClass),
position ='dodge') +
facet_wrap(~adult)
###
# Let's try one more bar graph of summary statistics
# This time: means rather than proportions.
###
# Mean age by class and sex
d4 = titanic %>%
group_by(sex, passengerClass) %>%
summarize(mean_age = mean(age))
d4
# Now a bar plot of mean by age class and sex
ggplot(data = d4) +
geom_col(mapping = aes(x=passengerClass, y=mean_age, fill=sex),
position ='dodge')
ls
getwd
getwd()
library(tidyverse)
library(ggplot2)
# Learning goals:
# 1) understand the grammar of graphics using ggplot2
# 2) make a scatterplot that encodes two (and then three) variables
# 3) learn about faceting: stratifying a basic plot by a third variable
# load the mpg data set (comes with tidyverse)
data(mpg)
# first few lines of the data set
# every row is a car, every column is a feature of that car
head(mpg)
# R's basic plotting command: plot(dataset$x, dataset$y)
plot(mpg$displ, mpg$hwy)
# Pros: simple syntax
# Cons: not that pretty, and very hard to do complex things
# We'll use ggplot2 instead
# Cons: commands are less intuitive at first
# Pros: much easier to make sophisticated, beautiful plots
# Basic structure of all statistical graphics:
# A graphic is a mapping of data variables to
# aesthetic attributes of geometric objects.
# all ggplot2 graphs have these three elements:
#   - a data set (data)
#   - a geometry (geom)
#   - an aesthetic mapping (aes)
# Below: creating a ggplot with the "grammar of graphics".
# The first layer tells ggplot where to look for variables (data)
# The second layer makes an "aesthetic mapping" (aes) from:
#   - data variable displ to aesthetic property x (horizontal location)
#   - data variable hwy to aesthetic property y (vertical location)
# It then displays the data in a scatter plot (geom_point)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
####
# aesthetic mappings can get more complicated, with >2 variables.
####
# here we vary map class to point color
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
# Lots of options for point properties that can be changed.
# Some aesthetic mappings are more effective than others!
# For example, compare the following with our use of color above...
# size of point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
# transparency
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# point shape
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
###
# facets
###
# Here we stratify a scatter plot by some third variable (here class).
# This is a more successful way to show this information than color.
# facet_wrap is added as a third layer to our plot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
# Now adding our own title, caption, axis labels with labs()
# Here labs() is a fourth layer added to our previous plot.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2) +
labs(
title = "Fuel efficiency generally decreases with engine size",
caption = "Data from fueleconomy.gov",
x="Engine displacement (liters)",
y="Highway gas mileage (mpg)"
)
###
# Misc notes
###
# 1) You can save a ggplot as an R object
# try this:
p1 = ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# Now adding a facet layer to p1
p1 + facet_wrap(~ class, nrow = 2)
p1 + facet_wrap(~ class, nrow = 1)
# 2) You can manually set an aesthetic property by
# placing it _outside_ the aes() command.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
library(ggplot2)
library(tidyverse)
library(ggplot2)
library(tidyverse)
toyimports = read.csv('data/toyimports.csv')
library(ggplot2)
library(tidyverse)
toyimports = read.csv('/data/toyimports.csv')
getwd()
library(ggplot2)
library(tidyverse)
toyimports = read.csv('/data/toyimports.csv')
library(ggplot2)
library(tidyverse)
toyimports = read.csv('data/toyimports.csv')
library(ggplot2)
library(tidyverse)
toyimports = read.csv('data/toyimports.csv')
head(toyimports)
# filter by partner name
uk_toys = toyimports %>%
filter(partner_name == 'United Kingdom')
head(uk_toys, 10)
library(ggplot2)
library(tidyverse)
toyimports = read.csv('data/toyimports.csv')
head(toyimports)
# filter by partner name
uk_toys = toyimports %>%
filter(partner_name == 'United Kingdom')
head(uk_toys, 10)
#  sum up imports across all different categories
uk_toys_total = uk_toys %>%
group_by(year) %>%
summarize(toys = sum(US_report_import))
# Plot the resut over time in a line graph
ggplot(uk_toys_total) +
geom_line(aes(x=year, y=toys))
ggplot(uk_toys_total) +
geom_line(aes(x=year, y=toys)) +
scale_x_continuous(breaks = 1996:2005)
ggplot(uk_toys_total) +
geom_line(aes(x=year, y=toys))
ggplot(uk_toys_total) +
geom_line(aes(x=year, y=toys)) +
scale_x_continuous(breaks = 1996:2005)
# Plot the resut over time in a line graph
ggplot(uk_toys_total) +
geom_line(aes(x=year, y=toys))
ggplot(uk_toys_total) +
geom_line(aes(x=year, y=toys)) +
scale_x_continuous(breaks = 1996:2005)
# Let's look at three countries
country_list = c('China', 'Korea, Rep.', 'United Kingdom')
country_list
combined_toys = toyimports %>%
filter(partner_name %in% country_list) %>%
group_by(year, partner_name) %>%
summarize(toys = sum(US_report_import))
combined_toys
# Plot all three as line graphs
ggplot(combined_toys) +
geom_line(aes(x=year, y=toys, color=partner_name)) +
scale_x_continuous(breaks = 1996:2005)
ggplot(combined_toys) +
geom_line(aes(x=year, y=toys, color=partner_name)) +
scale_x_continuous(breaks = 1996:2005) +
scale_y_log10()
ggplot(combined_toys) +
geom_line(aes(x=year, y=toys, color=partner_name)) +
scale_x_continuous(breaks = 1996:2005) +
scale_y_log10(breaks = c(5000, 10000, 50000, 1e5, 1e6, 5e6))
